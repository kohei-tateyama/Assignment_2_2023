// Generated by gencpp from file assignment_2_2023/GetDistResponse.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT_2_2023_MESSAGE_GETDISTRESPONSE_H
#define ASSIGNMENT_2_2023_MESSAGE_GETDISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment_2_2023
{
template <class ContainerAllocator>
struct GetDistResponse_
{
  typedef GetDistResponse_<ContainerAllocator> Type;

  GetDistResponse_()
    : dist(0.0)
    , av_speed_x(0.0)
    , av_speed_y(0.0)  {
    }
  GetDistResponse_(const ContainerAllocator& _alloc)
    : dist(0.0)
    , av_speed_x(0.0)
    , av_speed_y(0.0)  {
  (void)_alloc;
    }



   typedef double _dist_type;
  _dist_type dist;

   typedef double _av_speed_x_type;
  _av_speed_x_type av_speed_x;

   typedef double _av_speed_y_type;
  _av_speed_y_type av_speed_y;





  typedef boost::shared_ptr< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDistResponse_

typedef ::assignment_2_2023::GetDistResponse_<std::allocator<void> > GetDistResponse;

typedef boost::shared_ptr< ::assignment_2_2023::GetDistResponse > GetDistResponsePtr;
typedef boost::shared_ptr< ::assignment_2_2023::GetDistResponse const> GetDistResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment_2_2023::GetDistResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment_2_2023::GetDistResponse_<ContainerAllocator1> & lhs, const ::assignment_2_2023::GetDistResponse_<ContainerAllocator2> & rhs)
{
  return lhs.dist == rhs.dist &&
    lhs.av_speed_x == rhs.av_speed_x &&
    lhs.av_speed_y == rhs.av_speed_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment_2_2023::GetDistResponse_<ContainerAllocator1> & lhs, const ::assignment_2_2023::GetDistResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment_2_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baf3f8753bb076ec82d9321f4cc87db6";
  }

  static const char* value(const ::assignment_2_2023::GetDistResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbaf3f8753bb076ecULL;
  static const uint64_t static_value2 = 0x82d9321f4cc87db6ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment_2_2023/GetDistResponse";
  }

  static const char* value(const ::assignment_2_2023::GetDistResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 dist\n"
"float64 av_speed_x\n"
"float64 av_speed_y\n"
;
  }

  static const char* value(const ::assignment_2_2023::GetDistResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist);
      stream.next(m.av_speed_x);
      stream.next(m.av_speed_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDistResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment_2_2023::GetDistResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment_2_2023::GetDistResponse_<ContainerAllocator>& v)
  {
    s << indent << "dist: ";
    Printer<double>::stream(s, indent + "  ", v.dist);
    s << indent << "av_speed_x: ";
    Printer<double>::stream(s, indent + "  ", v.av_speed_x);
    s << indent << "av_speed_y: ";
    Printer<double>::stream(s, indent + "  ", v.av_speed_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT_2_2023_MESSAGE_GETDISTRESPONSE_H
