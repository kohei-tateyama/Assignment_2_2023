// Generated by gencpp from file assignment_2_2023/GoalStatus.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT_2_2023_MESSAGE_GOALSTATUS_H
#define ASSIGNMENT_2_2023_MESSAGE_GOALSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment_2_2023
{
template <class ContainerAllocator>
struct GoalStatus_
{
  typedef GoalStatus_<ContainerAllocator> Type;

  GoalStatus_()
    : header(0.0)
    , goal_id(0.0)
    , stamp(0.0)
    , secs(0.0)
    , nsecs(0.0)
    , id(0.0)
    , status(0.0)
    , text(0.0)  {
    }
  GoalStatus_(const ContainerAllocator& _alloc)
    : header(0.0)
    , goal_id(0.0)
    , stamp(0.0)
    , secs(0.0)
    , nsecs(0.0)
    , id(0.0)
    , status(0.0)
    , text(0.0)  {
  (void)_alloc;
    }



   typedef double _header_type;
  _header_type header;

   typedef double _goal_id_type;
  _goal_id_type goal_id;

   typedef double _stamp_type;
  _stamp_type stamp;

   typedef double _secs_type;
  _secs_type secs;

   typedef double _nsecs_type;
  _nsecs_type nsecs;

   typedef double _id_type;
  _id_type id;

   typedef double _status_type;
  _status_type status;

   typedef double _text_type;
  _text_type text;





  typedef boost::shared_ptr< ::assignment_2_2023::GoalStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment_2_2023::GoalStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GoalStatus_

typedef ::assignment_2_2023::GoalStatus_<std::allocator<void> > GoalStatus;

typedef boost::shared_ptr< ::assignment_2_2023::GoalStatus > GoalStatusPtr;
typedef boost::shared_ptr< ::assignment_2_2023::GoalStatus const> GoalStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment_2_2023::GoalStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment_2_2023::GoalStatus_<ContainerAllocator1> & lhs, const ::assignment_2_2023::GoalStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_id == rhs.goal_id &&
    lhs.stamp == rhs.stamp &&
    lhs.secs == rhs.secs &&
    lhs.nsecs == rhs.nsecs &&
    lhs.id == rhs.id &&
    lhs.status == rhs.status &&
    lhs.text == rhs.text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment_2_2023::GoalStatus_<ContainerAllocator1> & lhs, const ::assignment_2_2023::GoalStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment_2_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::GoalStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::GoalStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::GoalStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "067cd7cb55e722a1bc57106df18d22c9";
  }

  static const char* value(const ::assignment_2_2023::GoalStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x067cd7cb55e722a1ULL;
  static const uint64_t static_value2 = 0xbc57106df18d22c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment_2_2023/GoalStatus";
  }

  static const char* value(const ::assignment_2_2023::GoalStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 header\n"
"float64 goal_id\n"
"float64 stamp\n"
"float64 secs\n"
"float64 nsecs\n"
"float64 id\n"
"float64 status\n"
"float64 text\n"
;
  }

  static const char* value(const ::assignment_2_2023::GoalStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.stamp);
      stream.next(m.secs);
      stream.next(m.nsecs);
      stream.next(m.id);
      stream.next(m.status);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment_2_2023::GoalStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment_2_2023::GoalStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    Printer<double>::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    Printer<double>::stream(s, indent + "  ", v.goal_id);
    s << indent << "stamp: ";
    Printer<double>::stream(s, indent + "  ", v.stamp);
    s << indent << "secs: ";
    Printer<double>::stream(s, indent + "  ", v.secs);
    s << indent << "nsecs: ";
    Printer<double>::stream(s, indent + "  ", v.nsecs);
    s << indent << "id: ";
    Printer<double>::stream(s, indent + "  ", v.id);
    s << indent << "status: ";
    Printer<double>::stream(s, indent + "  ", v.status);
    s << indent << "text: ";
    Printer<double>::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT_2_2023_MESSAGE_GOALSTATUS_H
